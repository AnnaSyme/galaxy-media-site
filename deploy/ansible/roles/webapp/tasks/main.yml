---

- name: create server directory
  file:
    path: "{{ server_root }}"
    state: directory

- name: install systems dependencies
  ansible.builtin.package:
    name:
      - python3.8
      - python3-pip
      - certbot
      - python3-certbot-nginx

- name: clone git repository for galaxy-content-site
  ansible.builtin.git:
    repo: https://github.com/neoformit/galaxy-content-site.git
    dest: "{{ project_root }}"
    clone: yes

- name: link webapp to /srv/sites
  ansible.builtin.file:
    src: "{{ project_root }}/webapp"
    dest: "{{ web_root }}"
    state: link

- name: create webapp media directory
  file:
    path: "{{ web_root }}/webapp/media"
    state: directory

- name: create webapp logs directory
  file:
    path: "{{ web_root }}/webapp/logs"
    state: directory

- name: template webserver configuration
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  loop: "{{ webapp.templates }}"

- name: copy webserver configuration
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  loop: "{{ webapp.files }}"

- name: link to enable nginx virtualhost
  ansible.builtin.file:
    src: "/etc/nginx/sites-available/{{ inventory_hostname }}.conf"
    dest: "/etc/nginx/sites-enabled/{{ inventory_hostname }}"
    state: link

- name: Install Python virtualenv
  pip:
    name: virtualenv
    executable: pip3

- name: Install Python requirements into venv
  pip:
    requirements: "{{ project_root }}/requirements.txt"
    virtualenv: "{{ venv_root }}"
    virtualenv_python: python3.8

- name: run webapp setup script
  command: "bash {{ server_root }}/setup.sh"

- name: register SSL cert state
  stat:
    path: "/etc/letsencrypt/live/{{ inventory_hostname }}"
  register: ssl_cert_path

- name: create and install SSL certificate with letsencrypt
  command: "certbot --nginx --noninteractive --agree-tos --redirect --email {{ certbot_renew_email }} -d {{ inventory_hostname }}"
  when: certbot_ssl and not ssl_cert_path.stat.exists

- name: renew SSL certificates with letsencrypt
  command: "certbot certonly --nginx --noninteractive --agree-tos -d {{ inventory_hostname }}"
  when: certbot_ssl and ssl_cert_path.stat.exists

- name: Ensure webapp superuser login
  shell: |
    cd {{ web_root }} && \
    export DJANGO_SUPERUSER_PASSWORD={{ admin_user.password }} && \
    {{ venv_root }}/bin/python manage.py createsuperuser --noinput \
      --email {{ admin_user.email }} \
      --first_name {{ admin_user.first_name }} \
      --last_name {{ admin_user.last_name }}
  ignore_errors: yes
  when: not skip_database_migration

- name: update project ownership
  ansible.builtin.file:
    path: /home/ubuntu
    state: directory
    recurse: yes
    owner: ubuntu
    group: ubuntu

- name: update media file ownership
  ansible.builtin.file:
    path: "{{ web_root }}/webapp/media"
    state: directory
    recurse: yes
    owner: www-data
    group: www-data

- name: update log file ownership
  ansible.builtin.file:
    path: "{{ web_root }}/webapp/logs"
    state: directory
    recurse: yes
    owner: www-data
    group: www-data

- name: make update.sh executable
  file: dest=/home/ubuntu/update.sh mode=a+x

# This doesn't work as it's marked by git as a tracked change so clone fails
# in future...
# - name: remove default update.sh from git repo
#   ansible.builtin.file:
#     path: "{{ project_root }}/update.sh"
#     state: absent
